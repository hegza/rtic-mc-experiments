// ======================================== Memory Declaration and Registration ========================================

fsmcBank1: Memory.MappedMemory @ sysbus 0x60000000
    size: 0x10000000

// shared sram bank between the two cores. This will allow sharing data between the two cores as both of them can see this memory bank  
shared_sram: Memory.MappedMemory @ sysbus 0x20008000
    size: 0x00008000

// some small sram banks for putting the Stack of core 0
sram1: Memory.MappedMemory @ sysbus new Bus.BusPointRegistration { // BusPointRegistrations allow limiting the visibility of a Peripheral to a specific core
    address: 0x20000000;
    cpu: cpu0 
    }
    size: 0x00008000    

// some small sram banks for putting the Stack of core 1
sram2: Memory.MappedMemory @ sysbus new Bus.BusPointRegistration { // BusPointRegistrations allow limiting the visibility of a Peripheral to a specific core
    address: 0x20000000;
    cpu: cpu1 
    }
    size: 0x00008000   

// core 0 application will be stored here
flash1: Memory.MappedMemory @ sysbus new Bus.BusPointRegistration { address: 0x00000000; cpu: cpu0 /* limit the visibility to only core 0 */ }
    size: 0x10000000    

// core 1 application will be stored here
flash2: Memory.MappedMemory @ sysbus new Bus.BusPointRegistration { address: 0x00000000; cpu: cpu1 /* limit the visibility to only core 1 */}
    size: 0x10000000   

// ==================================== Peripheral Declaration and Registration ========================================

// CPUs ----------------------------------------------------------------------------------------------------------------

cpu0: CPU.CortexM @ sysbus
    cpuType: "cortex-m3"
    nvic: nvic0
    id: 0

cpu1: CPU.CortexM @ sysbus
    cpuType: "cortex-m3"
    nvic: nvic1
    id: 1

// Custom mailbox peripherals ------------------------------------------------------------------------------------------

mailbox0: Zakaria.Rtic.MailboxPeripheral @ sysbus new Bus.BusPointRegistration { 
    address: 0x40030000; // this memory region seems reserved in the reference manual, so we could use it for renode sim
    cpu: cpu0 
    }
    irq -> nvic0@59 // NOTE that we are stealing the 59th line irq to be used for mailbox interrupts

mailbox1: Zakaria.Rtic.MailboxPeripheral @ sysbus new Bus.BusPointRegistration { 
    address: 0x40030000; /* this memory region seems reserved in the reference manual, so we could use it for renode sim */ 
    cpu: cpu1 
    }
    irq -> nvic1@59 // NOTE that we are stealing the 59th line irq to be used for mailbox interrupts

// A proxy was needed to get the two mailboxes to cross reference each other
proxy: Zakaria.Rtic.MailboxProxy
    m0: mailbox0
    m1: mailbox1


// NVICs (each core gets its own NVIC) ---------------------------------------------------------------------------------

nvic0: IRQControllers.NVIC @ sysbus new Bus.BusPointRegistration { // BusPointRegistrations allow limiting the visibility of a Peripheral to a specific core
        address: 0xE000E000; 
        cpu: cpu0 
    }     
    priorityMask: 0xF0
    systickFrequency: 72000000
    IRQ -> cpu0@0

nvic1: IRQControllers.NVIC @ sysbus new Bus.BusPointRegistration { // BusPointRegistrations allow limiting the visibility of a Peripheral to a specific core
        address: 0xE000E000; 
        cpu: cpu1 
    }     
    priorityMask: 0xF0
    systickFrequency: 72000000
    IRQ -> cpu1@0

// USARTs --------------------------------------------------------------------------------------------------------------

usart1: UART.STM32_UART @ sysbus <0x40013800, +0x100>
    -> nvic0@37 | nvic1@37

usart2: UART.STM32_UART @ sysbus <0x40004400, +0x100>
    -> nvic0@38 | nvic1@38

usart3: UART.STM32_UART @ sysbus <0x40004800, +0x100>
    -> nvic0@39 | nvic1@39

usart4: UART.STM32_UART @ sysbus <0x40004C00, +0x100>
    -> nvic0@52 | nvic1@52

usart5: UART.STM32_UART @ sysbus <0x40005000, +0x100>
    -> nvic0@53 | nvic1@53

// I2Cs ----------------------------------------------------------------------------------------------------------------

i2c1: I2C.STM32F4_I2C @ sysbus 0x40005400
    EventInterrupt -> nvic0@31 | nvic1@31
    ErrorInterrupt -> nvic0@32 | nvic1@32

i2c2: I2C.STM32F4_I2C @ sysbus 0x40005800
    EventInterrupt -> nvic0@33 | nvic1@33
    ErrorInterrupt -> nvic0@34 | nvic1@34

// EXTI/GPIO interrupts ------------------------------------------------------------------------------------------------

exti: IRQControllers.STM32F4_EXTI @ sysbus 0x40010400
    numberOfOutputLines: 19
    [0-4] -> nvic0@[6-10] | nvic1@[6-10]
    [5-9] -> nvicInput23@[0-4]
    [10-15] -> nvicInput40@[0-5]

nvicInput23: Miscellaneous.CombinedInput @ none
    numberOfInputs: 5
    -> nvic0@23 | nvic1@23

nvicInput40: Miscellaneous.CombinedInput @ none
    numberOfInputs: 6
    -> nvic0@40 | nvic1@40

gpioPortA: GPIOPort.STM32F1GPIOPort @ sysbus <0x40010800, +0x400>
    [0-15] -> exti@[0-15]

gpioPortB: GPIOPort.STM32F1GPIOPort @ sysbus <0x40010C00, +0x400>
    [0-15] -> exti@[0-15]

gpioPortC: GPIOPort.STM32F1GPIOPort @ sysbus <0x40011000, +0x400>
    [0-15] -> exti@[0-15]

gpioPortD: GPIOPort.STM32F1GPIOPort @ sysbus <0x40011400, +0x400>
    [0-15] -> exti@[0-15]

gpioPortE: GPIOPort.STM32F1GPIOPort @ sysbus <0x40011800, +0x400>
    [0-15] -> exti@[0-15]

gpioPortF: GPIOPort.STM32F1GPIOPort @ sysbus <0x40011C00, +0x400>
    [0-15] -> exti@[0-15]

gpioPortG: GPIOPort.STM32F1GPIOPort @ sysbus <0x40012000, +0x400>
    [0-15] -> exti@[0-15]


// update system bus ? still don't understand how this works
sysbus:
    init:
        ApplySVD @https://dl.antmicro.com/projects/renode/svd/STM32F103.svd.gz
        Tag <0x40021000, 0x40021003> "RCC_CR" 0x0A020083