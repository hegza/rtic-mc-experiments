searchState.loadedDescShard("rtic_core", 0, "This is a re-usable crate that captures the <strong>hardware </strong>…\nArguments provided to the #[app(…)] macro attribute, …\nInterface for providing the low-level hardware bindings …\nThis should be used to compose an <strong>RTIC distribution</strong>. In …\nA trait that allows defining a <strong>Compilation Pass</strong>.\nBinds a <strong>Compilation Pass</strong> that will run after the <strong>Core Pass</strong>\nBinds a <strong>Compilation Pass</strong> that will run before the <strong>Core Pass</strong>\nOnce the <strong>CorePass</strong> low level hardware bindings are …\nImplementation must return the default task priority to be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImplementation specific pre-computed values and global …\nNon-preemptable code sections\nSRP-based Resource locking implementation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides a utility to streamline parsing and manipulating …\nReturns a human readable name/alias used to identify the …\nCustomizing the default behavior of idle task\nSetting up the system\nAdditional user code validation\nupdates resource ceilingscollects and structure key …\nRuns the (partial) proc-macro logic that allows extending …\nEntry name for a specific core\nWrapping task execution\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf <code>multibin</code> feature is enabled, this returns a tokenstream …\nIf <code>multibin</code> feature is enabled, this returns a tokenstream …\nIf <code>multibin</code> feature is enabled, this returns a tokenstream …\nIf <code>multibin</code> feature is enabled, this returns a tokenstream …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse a #[app(arg1=“val1”, …)] macro attribute\nParse the tokenstream representation of the arguments of …\nReconstruct the tokenstream representation of #[app(arg1=…")